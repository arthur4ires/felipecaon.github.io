<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on caon.io</title>
    <link>https://caon.io/docs/</link>
    <description>Recent content in Docs on caon.io</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://caon.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/403bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/403bypass/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cachepoisoning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cachepoisoning/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/clickjacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/clickjacking/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/commandinjection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/commandinjection/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cookieattacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cookieattacks/</guid>
      <description>Cookie Based Attacls #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/csrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/csrf/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/deserialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/deserialization/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/httpshosteheader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/httpshosteheader/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/idor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/idor/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/javascriptfiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/javascriptfiles/</guid>
      <description>Javascript Files #  Linters #   JSHint  Download #    JSScanner
Download all js files for each site, beautify and run linkfinder: https://github.com/dark-warlord14/JSScanner
  JSBeat
Download all js files for each site and beautify: https://github.com/felipecaon/BugBountyStuff/blob/main/scripts/jsbeat.py
  Way Back Machine #  Premise: Javascript files often gets changed, an attaker may find sensitive stuff in an older version of a JS file that is not alive anymore.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/lfi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/lfi/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/oauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/oauth/</guid>
      <description>Broken Authentication #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/openredirect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/openredirect/</guid>
      <description>Open Redirect #  Often a bug that brings impact when chained.
Using &amp;ldquo;https:&amp;rdquo; to bypass &amp;ldquo;//&amp;rdquo; blacklisted keyword
https:google.com Using &amp;ldquo;//&amp;rdquo; to bypass &amp;ldquo;http&amp;rdquo; blacklisted keyword
//google.com Using /\/ to bypass // blacklisted keyword
\/\/google.com/ /\/google.com/ Using &amp;ldquo;/&amp;quot; to bypass:
/\google.com Using &amp;ldquo;%E3%80%82&amp;rdquo; to bypass &amp;ldquo;.&amp;rdquo; blacklisted character
//google%E3%80%82com Using null byte &amp;ldquo;%00&amp;rdquo; to bypass blacklist filter
//google%00.com Using parameter pollution
?next=whitelisted.com&amp;amp;next=google.com Using &amp;ldquo;@&amp;rdquo; character, browser will redirect to anything after the &amp;ldquo;@&amp;rdquo;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/parameterpollution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/parameterpollution/</guid>
      <description>HTTP Parameter Pollution #  When searching for HPP keep in mind some servers handle parameters differently.
Take http://example.com?username=foo&amp;amp;username=bar as an example.
 PHP and Apache use the last username occurence. Tomcat uses the first occurence. ASP and IIS user all occurences  A study containing all the servers can be found here: https://owasp.org/www-pdf-archive/AppsecEU09_CarettoniDiPaola_v0.8.pdf
Social Media Share Links #  Often a websites offers its user a feature to share a given page in social media.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/prototypepollution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/prototypepollution/</guid>
      <description>https://github.com/BlackFan/client-side-prototype-pollution</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/requestsmuggling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/requestsmuggling/</guid>
      <description>Request Smuggling #  It&amp;rsquo;s far more easier to search for articles explaining this concept.
If you want to test for it:
 HTTP Request Smuggler, Burp extension Smuggler  Articles #   https://portswigger.net/web-security/request-smuggling https://cobalt.io/blog/a-pentesters-guide-to-http-request-smuggling  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/sqli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/sqli/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/ssrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/ssrf/</guid>
      <description>SSRF #  Sometimes sites offer the possibility to make external requests using their server, what if we could user their “external” service to make requests for internal resources. That’s SSRF.
If the site is hosted in amazon, it is possible to get internal information by requesting the urls:
http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/iam/securty-credentials Another idea is to try and request IP’s that we know that are internal:
10.0.0.0 to 10.255.255.55 100.64.0.0 to 10.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/ssti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/ssti/</guid>
      <description>https://github.com/DiogoMRSilva/websitesVulnerableToSSTI</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/twofa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/twofa/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/wafbypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/wafbypass/</guid>
      <description>WAF Bypass Techniques #    Try to find real IP address instead of TLD domain, see IP history websites section
  Awesome WAF
  WAF Community Bypasses
  Known Bypasses
  # https://github.com/vincentcox/bypass-firewalls-by-DNS-history bash bypass-firewalls-by-DNS-history.sh -d example.com # https://github.com/RedSection/pFuzz # A lot of options, see docs IP history websites #   https://whoisrequest.com/history/ https://viewdns.info/iphistory/ https://blog.nem.ec/2020/01/22/discover-cloudflare-wordpress-ip  Quick Techniques #  Given domain.com, try to access:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/webtech/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/webtech/</guid>
      <description>Web technologies #  Adobe AEM #   aem-hacker aemscan aem-paths.txt writeup about aem exploitation  API #   API-Security-Checklist api-testing-checklist API Security 31-days-of-API-Security-Tips awesome-api-security web-api-pentesting OpenAPI Scanner Generaç tips Mindmap More Tips  Apache #   Exploit default apache  Artifactory Hacking #   Artifactory Hacking guide  ASP.NET/IIS #   exploiting-viewstate viewgen shortname scanner  trace.axd any.aspx/trace.axd WEB-INF/web.xml /con/ /aux/ con.aspx aux.aspx Cloudflare #  Techniques to try to uncover web servers behind cloudflare:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/xss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/xss/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/xxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/xxe/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/mindmaps/cookiebasedattacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/mindmaps/cookiebasedattacks/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/mindmaps/signup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/mindmaps/signup/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/dorks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/dorks/</guid>
      <description>Dorks #  Google #  # https://github.com/six2dez/degoogle_hunter ./degoogle_hunter.sh example.com # https://github.com/m3n0sd0n4ld/uDork ./uDork.sh united.com -u all ./uDork.sh united.com -e all # https://dorks.faisalahmed.me/ # Google dork helper, input url and the sites generates dorks Github #  #https://github.com/obheda12/GitDorker python3 GitDorker.py -tf github_tokens -q example.com -p -ri -d Dorks/medium_dorks.txt -o gitdorker_out.txt # https://vsec7.github.io/ # Git dork helper, input url and the site generates dorks Useful sites #   https://dorks.faisalahmed.me/ (Appends URL to google dorks) https://vsec7.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/fuzzing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/fuzzing/</guid>
      <description>Fuzzing #  # https://github.com/ffuf/ffuf ffuf -w /path/to/wordlist -u https://target/FUZZ # Multiple sources ffuf -w http-methods:METHOD -w payloads:PAYLOAD -w headers:HEADER -u &amp;quot;https://streetcontxt.com/PAYLOAD&amp;quot; -H &amp;quot;HEADER:127.0.0.1&amp;quot; -X &amp;quot;METHOD&amp;quot; #Cool flags -ac: Calibrate requests to unmatch false positives -recursion: recursion -se: Stop on erors -sf: Stop on 95% 403 Forbidden, possible WAF ban Backup Files #  # https://github.com/mazen160/bfac bfac --no-text --url http://example.com/test.php --level 2 Wordlists #  WebApps #  # https://github.com/p0dalirius/webapp-wordlists # This repo contains wordlists for a lot of webapps </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/paramdiscovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/paramdiscovery/</guid>
      <description>Parameter Discovery #  There are two tools that I prefer when doing param scanning. X8, which is a tool made just for param discovery with advanced comparison and ffuf, which is a general fuzzing tool that can be used for single param testing.
# https://github.com/Sh1Yo/x8 x8 -u &amp;quot;https://example.com/&amp;quot; -w &amp;lt;wordlist&amp;gt; # https://github.com/ffuf/ffuf ffuf -w /path/to/paramnames.txt -u https://target/script.php?FUZZ=test_value Param discovering from crawling results #  Given a list with crawled urls, grep the ones that have known parameters and get only the url</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/probing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/probing/</guid>
      <description>Probing #  Validates a list of urls, checks to see if they are alive or not.
Two tools were provided, choose the best fit, the do the same thing but in some cases httprobe is faster and resolves more urls correctly.
# https://github.com/tomnomnom/httprobe/ # go get -u github.com/tomnomnom/httprobe@master cat urls | httprobe --prefer-https | tee -a out # https://github.com/projectdiscovery/httpx # go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest cat urls | httpx -random-agent -retries 2 -o out </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/scope/</guid>
      <description>Scope #  As a bug bounty hunter, you may keep a close eye in the scope for the desired program.
An scope can be defined as the limits of where your research should go, if you ever find a bug, this must reside inside the scope, otherwise, the finding is not valid.
Example of scope
   In-Scope Out of scope     example.com subdomain.example.com   *-dev.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/screenshot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/screenshot/</guid>
      <description>Screenshot #  # https://github.com/FortyNorthSecurity/EyeWitness EyeWitness -f urls.txt --web # https://github.com/sensepost/gowitness </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/spider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/spider/</guid>
      <description>Spider #  # https://github.com/jaeles-project/gospider gospider -S subdomains.txt --js -t 20 -d 5 --sitemap --robots -r &amp;gt; spider.txt cat spider.txt | grep -o -E &amp;quot;(([a-zA-Z][a-zA-Z0-9+-.]*\:\/\/)|mailto|data\:)([a-zA-Z0-9\.\&amp;amp;\/\?\:@\+-\_=#%;,])*&amp;quot; | grep &amp;quot;example.com&amp;quot; &amp;gt;&amp;gt; links.txt # https://github.com/projectdiscovery/httpx cat links.txt | httpx -follow-host-redirects -random-agent -status-code -silent -retries 2 -title -web-server -tech-detect -location -o webs_info.txt # https://github.com/projectdiscovery/dnsx dnsx -retry 3 -a -aaaa -cname -ns -ptr -mx -soa -resp -silent -l subdomains.txt &amp;gt; dnsx_info.txt The list generated from gospider links.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/subdomainenum/subdomainenum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/subdomainenum/subdomainenum/</guid>
      <description>Subdomain Enumeration #  The art of subdomain enumeration consists into gathering a list of valid subdomains of your target, this list allows a researcher to expand attack surface and understand more about the target.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/subdomainenum/subdomainenum_active/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/subdomainenum/subdomainenum_active/</guid>
      <description>Active Resources #  The ideia behind an active subdomain recon is to bruteforce subdomain in order to find anything that is valid.
Get resolvers at:
RESOLVER_SOURCE Pure DNS #  # https://github.com/d3mondev/puredns puredns resolve subdomains.txt -r resolvers.txt --write resolved_dns_domains puredns bruteforce subdomains.txt example.com -r resolvers.txt --write resolved_dns_domains Permutations #  # https://github.com/Josue87/gotator gotator -sub subdomains/subdomains.txt -perm permutations_list.txt -depth 1 -numbers 10 -mindup -adv -md </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/subdomainenum/subdomainenum_passive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/subdomainenum/subdomainenum_passive/</guid>
      <description>Passive Resources #  A passive resource means that you will grab subdomains that were already discovered from another tools or were registered in some place.
# https://github.com/OWASP/Amass amass enum -passive -d domain.com # https://github.com/projectdiscovery/subfinder subfinder -d domain.com -all -silent # https://github.com/tomnomnom/assetfinder assetfinder --subs-only example.com # https://github.com/Findomain/Findomain findomain -u example.com -q # https://github.com/lc/gau # https://github.com/tomnomnom/unfurl gau -subs example.com | unfurl -u domains # https://github.com/gwen001/github-subdomains # Need to configure github keys github-subdomains -d example.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/wafcheck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/wafcheck/</guid>
      <description>WAF Check #  # https://github.com/EnableSecurity/wafw00f wafw00f -i websites.txt </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/wordlistgeneration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/wordlistgeneration/</guid>
      <description>Wordlist generation #  After spidering across the target it is a good idea to check the content discovered and append the newly discovered content to your wordlist.
Parameters #  # https://github.com/tomnomnom/anew cat links.txt | unfurl -u keys | anew all_parameters.txt Paths #  cat links.txt | unfurl paths | rev | cut -d &#39;/&#39; -f1 | rev | anew paths.txt </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/burp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/burp/</guid>
      <description>Burp Suite #  Plugins #   Backslash powered scanner, find additional vulns JS Miner, gets sensitive content from js files Active Scan++, find additional vulns J2EEScan JS Link Finder, find links inside javascript files Para Miner, mines urls searching for parameters Reflector, find reflected inputs JSON Web Tokens, creates a tab to analyze json based tokens Retire.js, find old javascript libraries with known vulns Web Cache Deception Scanner, tests for cache problems Burp Bounty, OP HTTP methods discloser, discloses methods for same endpoint  Repositories #   IntruderPayloads, collection of payloads used in burp AwesomeBurpExtensions  Articles #   Payload Processing Rule in Burp suite (Part 1) Payload Processing Rule in Burp suite (Part 2) Beginners Guide to Burpsuite Payloads (Part 1) Beginners Guide to Burpsuite Payloads (Part 2)  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/career/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/career/</guid>
      <description>Career Advice #     Site Description     https://github.com/rezaduty/cybersecurity-career-path/blob/master/Security_Engineer(Software).md CyberSec career pa&amp;gt;   https://devskiller.com/screen-security-engineer/ Security Engineer Career    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/repositories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/repositories/</guid>
      <description>Respositories #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/sites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/sites/</guid>
      <description>Sites #     Link Niche     https://www.hahwul.com/ Blog   https://netsec.expert/ Blog   https://ihorrasch.com/ Blog   https://www.agarri.fr/en Blog   https://www.100security.com.br/ Blog (portuguese)   https://www.hacking8.com/ Blog (chinese)   https://weboas.is/ Link aggregator    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/tools/</guid>
      <description>Web Tools #     Website Description     https://osintframework.com/ Collecion of OSINT tools   https://grep.app/ Grep over multiple github repositories   https://publicwww.com/ Grep over multiple websites source codes   https://www.degraeve.com/reference/urlencoding.php List of URL encoded characters   https://api-guesser.netlify.app/ Input an api key and the script will return from where it belongs   https://gchq.github.io/CyberChef/ For all purposes   https://securityheaders.com/ Test sites for security headers   https://builtwith.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/writeups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/writeups/</guid>
      <description>Write Ups #     WriteUp Description     https://pentester.land/list-of-bug-bounty-writeups.html List of up to date writeups   https://labs.detectify.com/2021/09/30/10-types-web-vulnerabilities-often-missed/ Common vulns often missed   http://www.pc-help.org/obscure.htm Obscure URLs, useful for SSRF   https://ctftime.org/writeups?tags=web200&amp;hidden-tags=web%2cweb100%2cweb200 CTF writeups   https://sensepost.com/blog/2021/android-application-testing-using-windows-11-and-windows-subsystem-for-android/ Android testing in windows 11   https://www.xmind.net/m/2FwJ7D/ Cookie based authentication issues    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/youtubechannels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/youtubechannels/</guid>
      <description>Youtube Channels #     Name Channel     Ippsec https://www.youtube.com/c/ippsec   Reconless https://www.youtube.com/channel/UCCp25j1Zh9vc_WFm-nB9fhQ    </description>
    </item>
    
  </channel>
</rss>
