# XSS	

```
# https://github.com/hahwul/dalfox
dalfox url http://example.com

cat urls | dalfox pipe
```

Find reflected parameters that could lead to XSS with Gxss

```
# https://github.com/KathanP19/Gxss
cat list | Gxss -c 100 -p REPLACE_STRING
```

## Semgrep

Semgrep can be used to detect sink and sources and assist in XSS detection.

### Usage

Download javascript files and beautify them (See [Javascript](https://caon.io/docs/exploitation/javascriptfiles/#download)), then run semgrep with

```
semgrep -c xss.yaml scripts/*
```

{{< hint danger >}} **Hold down!**

Javascript files must be beautified, otherwise semgrep will no work properly. {{< /hint >}}

```yaml
rules:
  - id: domxss-insertAdjacentHTML
    languages:
      - javascript
      - typescript
    message: Found dangerous HTML output
    pattern-either:
      - pattern: document.location.search = ...
      - pattern: document.location.hash = ...
      - pattern: document.location.pathname = ...
      - pattern: window.location.search = ...
      - pattern: window.location.hash = ...
      - pattern: window.location.pathname = ...
      - pattern: document.URL = ...
      - pattern: document.documentURI = ...
      - pattern: document.baseURI = ...
      - pattern: document.cookie = ...
      - pattern: document.referrer = ...
      - pattern: $X.insertAdjacentHTML(...)
      - pattern: $X.innerHTML(...)
      - pattern: $X.innerHTML = ...
      - pattern: eval(...)
      - pattern: execScript
      - pattern: script.src = ...
      - pattern: iframe.src = ...
      - pattern: document.location = ...
      - pattern: window.location = ...
      - pattern: document.location.href = ...
      - pattern: window.location.href = ...
      - pattern: document.write(...)
      - pattern: document.writeln(...)
      - pattern: $X.outerHTML = ...
      - pattern: $X.outerHTML(...)
    severity: WARNING
```

```yaml
rules:
  - id: domxss-insertAdjacentHTML
    languages:
      - javascript
      - typescript
    message: Found dangerous HTML output
    mode: taint
    pattern-sources:
      - pattern: document.location.search
      - pattern: document.location.hash
      - pattern: document.location.pathname
      - pattern: document.location.href
      - pattern: document.location
      - pattern: window.location
      - pattern: window.location.href
      - pattern: window.location.search
      - pattern: window.location.hash
      - pattern: window.location.pathname
      - pattern: document.URL
      - pattern: document.documentURI
      - pattern: document.baseURI
      - pattern: document.cookie
      - pattern: document.referrer
    pattern-sinks:
      - pattern: $X.insertAdjacentHTML(...)
      - pattern: $X.innerHTML(...)
      - pattern: $X.innerHTML = ...
      - pattern: eval(...)
      - pattern: execScript
      - pattern: script.src = ...
      - pattern: iframe.src = ...
      - pattern: document.location = ...
      - pattern: window.location = ...
      - pattern: document.location.href = ...
      - pattern: window.location.href = ...
      - pattern: document.write(...)
      - pattern: document.writeln(...)
      - pattern: $X.outerHTML = ...
      - pattern: $X.outerHTML(...)
    severity: WARNING
```

## Markdown

Markdown parsers can lead to XSS

- https://swarm.ptsecurity.com/fuzzing-for-xss-via-nested-parsers-condition/

## Bypasses

A good way of finding bypasses is to unicode characters,

alert would become ale\u{72}t(11111

# Cool resources

| URL | Description |
| --- | --- |
| https://xss.pwnfunction.com/ | pwnfunction XSS games |
